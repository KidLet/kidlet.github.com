<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>KidLet's Blog</title>
 <link href="http://kidlet.github.com/atom.xml" rel="self"/>
 <link href="http://kidlet.github.com"/>
 <updated>2013-03-16T20:42:26+08:00</updated>
 <id>http://kidlet.github.com</id>
 <author>
   <name>KidLet</name>
   <email>kidlets@qq.com</email>
 </author>

 
 <entry>
   <title>有趣的猜数字问题 —动态规划</title>
   <link href="http://kidlet.github.com/2013/03-16/guessnum.html"/>
   <updated>2013-03-16T00:00:00+08:00</updated>
   <id>http://kidlet.github.com/2013/03-16/guessnum</id>
   <content type="html">&lt;h1&gt;问题描述&lt;/h1&gt;

&lt;p&gt;给定[1,100]区间内的所有整数，其中有一个正确的整数，你每次可以向小明询问一个整数，他会回答你猜的数字是正确、小了、大了。但是不同的是一旦你有一次猜大了，那么小明就不会再提醒你任何信息除非你猜中结果了。&lt;/p&gt;

&lt;p&gt;那么求： 在最坏的情况下，我最少只需猜多少次即可猜中结果。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;这个题目的描述有多种变种，譬如高空丢装水的气球，丢Xbox。似乎也经常在面试题中出现&lt;/p&gt;&lt;/blockquote&gt;

&lt;h1&gt;思考&lt;/h1&gt;

&lt;p&gt;看到问题，我猜大家头脑中第一反应是二分法，的确，非常的类似。唯一的不同就是一旦有一次猜得过大那么就不会再得到任何有效的信息，直到你猜中结果。很明显二分在这里已经不适用了。&lt;/p&gt;

&lt;p&gt;首先，有些同学可能看到 “最坏情况”，“最少次数” 会觉得有些矛盾，不知道什么叫做最坏情况的最少次数。&lt;/p&gt;

&lt;p&gt;在这里，“最坏情况的最少猜数字次数”应该理解为，不论“正确的整数”是哪一个都好，你只要给我x次机会，我一定可以猜出来，其中让x尽可能的小，那么这个x即为所求。&lt;/p&gt;

&lt;p&gt;当发现二分的方法无法实现的时候，有的同学开始想到将区间均分（包括我，哦呵呵），然后会去考虑到要将[1,100]这个整数区间等分成几份，从中找出一个最小的x，譬如等分为10份，那么我依次猜10,20,30,...,90,91,92,93,..99 那么总共需要18次。&lt;/p&gt;

&lt;p&gt;但是如果反问为什么一定是10份？ 20份不可以吗？ 如果没办法按照等分的情况结果会怎样？所以还是很难拿出让人信服的理论依据表示这种做法是正确的。&lt;/p&gt;

&lt;h1&gt;灵感闪现&lt;/h1&gt;

&lt;p&gt;也许你已经注意到我接下来要讲的一个&lt;strong&gt;关键点&lt;/strong&gt;，假如你知道[1,100]这个区间的问题的解， 那么[101,200]这个区间的解呢？你会发现对于这个问题，区间的起点和终点并不重要，重要的是区间的&lt;strong&gt;跨度&lt;/strong&gt;，即我们要猜的所有整数有多少个。&lt;/p&gt;

&lt;p&gt;那么我们就可以把问题抽象出来，设d（n）为问题的解,n表示区间的跨度，譬如在这题中，我们要求的就是d（100）&lt;/p&gt;

&lt;p&gt;接下来我们来尝试着模拟我们猜数字的过程，假设最开始我猜了第一个数字50，那么会出现三种情况：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bingo！答对了&lt;/li&gt;
&lt;li&gt;小了&lt;/li&gt;
&lt;li&gt;大了&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;第一种情况显然不是我们所要考虑的，那是最好的情况（真是狗屎运）。第二种情况我们接下来要猜[51,100]这个区间。第三种情况，对于这个题目&lt;strong&gt;最坏&lt;/strong&gt;我们需要猜48次（为什么不是49次，因为第49次我们不用猜，剩下那个数肯定是答案）&lt;/p&gt;

&lt;p&gt;那么对于第二种情况刚刚我们说过了，这个问题只和区间的跨度有关，而且从全局的角度看 区间[51,100]∈[1,100],那么很自然会想到 我们要猜[51,100]这个区间其实是解[1,100]这个区间的一个&lt;strong&gt;子问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;到这里，我们总结一下，我们问题抽象为 d（100）,并且每次猜的时候会有两种可能（2、3两种情况），我们应该选其中最大的作为其解 （这是因为所求为最坏情况）&lt;/p&gt;

&lt;p&gt;好了，现在问题是，我们上面举的例子是从50开始猜的，但是也有可能从其他数字开始猜，不同的数字开始猜会导致最后的结果不同，那么我们就是要从这些决策中，从中选择一个最小的值最为d（100）的解&lt;/p&gt;

&lt;p&gt;下面给出方程：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;d（n）= min{ max（ d(n-j), j-2）+1 }   （j∈[1,n]）&lt;/li&gt;
&lt;li&gt;d（1）= 0&lt;/li&gt;
&lt;li&gt;d（2）= 1&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;怎么理解&lt;/h2&gt;

&lt;p&gt;首先内层 max（ d(n-j), j-2）+1 为猜解跨度为n的区间，并且猜其中第j个数的最坏情况&lt;/p&gt;

&lt;p&gt;外层的的含义 min {}、j 通过不断的枚举猜的数字j（区间第j个数字），在其最坏情况中找出一个最少的次数&lt;/p&gt;

&lt;h1&gt;总结&lt;/h1&gt;

&lt;p&gt;通过问题的抽象，引入动态规划，成功将问题在O（n&lt;sup&gt;2&lt;/sup&gt;）的时间内得到解决。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Max Sum —经典动态规划问题</title>
   <link href="http://kidlet.github.com/2013/03-12/Maxsum.html"/>
   <updated>2013-03-12T00:00:00+08:00</updated>
   <id>http://kidlet.github.com/2013/03-12/Maxsum</id>
   <content type="html">&lt;h1&gt;问题描述&lt;/h1&gt;

&lt;p&gt;给定一个整数数组A，要求得其中所有连续子数组中的最大和值
例如数组A为 [6, -1, 5, 4, -7]&lt;/p&gt;

&lt;p&gt;所求结果应该为：子数组 sum( [6, -1, 5, 4] ) = 14&lt;/p&gt;

&lt;h1&gt;枚举法&lt;/h1&gt;

&lt;p&gt;拿到题目， 首先一般第一想法是 穷举所有可能的子数组，并且求得其和值，从中选取最大的值即为所求。&lt;/p&gt;

&lt;p&gt;那么你的代码可能会像下面这样
( 这里假设数据均为有效数据，即A!=NULL，且数组A长度至少为1,且计算过程中不会溢出 )&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxSum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//hold the answer, and regard A[0] as the answer firstly&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// calculate the sum of sub-array [start, start+1, ..., end]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;时间复杂度 O （n&lt;sup&gt;3&lt;/sup&gt;）, n为数组长度&lt;/p&gt;

&lt;h3&gt;优化后的 穷举法&lt;/h3&gt;

&lt;p&gt;仔细想想， 发现上面的做法其实还可以做得更好，不过那样需要多花费些空间，典型的空间换时间。借助前缀和，可以减少使用 最内层的循环，这是求数组“部分和”经常使用的方法，虽然简单，却往往特有奇效。&lt;/p&gt;

&lt;p&gt;这里 我们定义了一个数组 sum[N], 对于数组中某个数 sum[i]其值为A[0]+A[1]+...+A[i-1]的值&lt;/p&gt;

&lt;p&gt;通常这种数组叫做前缀和， 我们需要花费 O（n）的时间去维护，然后就可以在O（1）的时间内算出数组A中任意一个子数组的和&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;例如我们要计算 子数组从 [start,...,end] 的和
那么我们只需要： sum[end+1]-sum[start] 多么神奇，原先需要一个for循环才能做到的事情，现在只需一个减法。&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxSum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//hold the answer, and regard A[0] as the answer firstly&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sum [i] means the sum of array [0,1,2,...,i-1]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// calculate the sum of sub-array [start, start+1, ..., end]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;时间复杂度 O （n&lt;sup&gt;2&lt;/sup&gt;）, 空间复杂度 O(n)&lt;/p&gt;

&lt;h1&gt;动态规划&lt;/h1&gt;

&lt;p&gt;上面的穷举法已经基本上没有优化空间， 这时候就得转向其他方面去考虑。下面来见识下动态规划的魅力吧。&lt;/p&gt;

&lt;p&gt;动态规划重点在于子问题的定义，对于这个问题，开始可能会想定义 d(i)为 数组A[0..i]这个子问题的解，但是很快发现这是行不通的，或者说比较冗余的，因为不好确定 d(i)和d(i+1)之间的联系。&lt;/p&gt;

&lt;p&gt;这里我们定义 d(i)表示 &lt;strong&gt;子数组 A[0..i] 对于这个问题的解&lt;/strong&gt;。那么可以得到这样的递推式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;         d(i-1) + A[i]  ( d(i-1)+A[i] &amp;gt;= A[i] )
d(i) =
         A[i]           ( d(i-1)+A[i] &amp;lt;  A[i] )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如何理解呢？ 假设我们已经知道 d(i-1)， 那么要求d(i)有两种情况&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A[i]这个值与上一段d(i-1)连在一起成为d(i)的解&lt;/li&gt;
&lt;li&gt;A[i]这个值足够大，另起炉灶，单独成为d(i-1)的解&lt;/li&gt;
&lt;/ol&gt;


&lt;hr /&gt;

&lt;p&gt;如果你想测试你的程序是否正确可以 &lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1003&quot;&gt;点这里&lt;/a&gt; 答题&lt;/p&gt;

&lt;p&gt;(未完待续)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>关于我的博客</title>
   <link href="http://kidlet.github.com/2013/02-09/Myblog.html"/>
   <updated>2013-02-09T00:00:00+08:00</updated>
   <id>http://kidlet.github.com/2013/02-09/Myblog</id>
   <content type="html">&lt;p&gt;这个博客是基于 Jekyll 搭建的，并且托管在Github， 目的是 发一些平时学到知识，多写些文字会对原来的理解，进一步加深。同时也可以锻炼下前端方面的知识。&lt;/p&gt;

&lt;h2&gt;兼容性&lt;/h2&gt;

&lt;p&gt;前端最担心就是 浏览器之间的兼容性问题，往往在Firefox， Chrome 上看起来非常精致的网页，放到 IE 上就会变得一塌糊涂。 不过好在 这个博客内容相对比较简单，而且用的是比较标准的 XHTML1.0 和 CSS2 （极小部分使用了CSS3） 兼容性问题处理起来还不太费力。&lt;/p&gt;

&lt;h3&gt;目前在以下浏览器测试通过&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;IE 10,9,8,7,6&lt;/li&gt;
&lt;li&gt;Chrome 24&lt;/li&gt;
&lt;li&gt;Firefox 18&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;待测试浏览器：Safari。
当然在IE8及以下版本, 会看到比较平板的效果。&lt;/p&gt;

&lt;h3&gt;出现的兼容性问题&lt;/h3&gt;

&lt;h4&gt;1. &amp;lt;a&gt; &amp;lt;img&gt;&lt;/h4&gt;

&lt;p&gt;问题出现在 IE 6 到 IE 8
当 &amp;lt;a&gt; 标签里面 嵌入 &amp;lt;img&gt; 标签后， IE 会自动 给图片加上 2px宽边框&lt;/p&gt;

&lt;h4&gt;2. position: fixed&lt;/h4&gt;

&lt;p&gt;IE 6 不支持 CSS 的 position: fixed 属性
这里是用于 “回到顶部” 功能。&lt;/p&gt;

&lt;h4&gt;3. png 背景透明&lt;/h4&gt;

&lt;p&gt;IE 6 使用 png 时候， 透明的位置会用灰白色的方块替换，影响美观。&lt;/p&gt;

&lt;h4&gt;4.IE 6, 7 排版问题&lt;/h4&gt;

&lt;p&gt;初步是怀疑 对 Min-width 的解析问题&lt;/p&gt;

&lt;h2&gt;主体框架&lt;/h2&gt;

&lt;h3&gt;Jekyll&lt;/h3&gt;

&lt;p&gt;Jekyll 是一个非常棒的 静态博客， 采用了 Markdown 等方式来写博文， 并且采用 Liquid模板系统， 所以具有很高的定制性。&lt;/p&gt;

&lt;p&gt;这里我主要写了 两个模板 default.html 和 post.html
以及 自己修改了 Jekyll-bootstrap 的一些内置函数以适应 我的博客。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|-- index.md
|-- archive.html
|-- assets
    |-- css
        |-- default.css
        |-- global.css
        |-- post.css
        |-- pygments.css
   |-- img
   |-- js
   |-- font
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;待完成任务&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;回到顶部动画效果&lt;/li&gt;
&lt;li&gt;完善代码注释信息&lt;/li&gt;
&lt;li&gt;添加首页分页功能&lt;/li&gt;
&lt;li&gt;编写 “关于” 页面&lt;/li&gt;
&lt;li&gt;Safari， Opera， IE10,  IE9 浏览器兼容性测试&lt;/li&gt;
&lt;li&gt;添加博文摘要导航&lt;/li&gt;
&lt;li&gt;添加图片友好显示效果&lt;/li&gt;
&lt;li&gt;前端优化 （非必要）&lt;/li&gt;
&lt;li&gt;SEO 优化&lt;/li&gt;
&lt;li&gt; fix IE 6 “回到顶部”&lt;/li&gt;
&lt;li&gt;支持手机浏览&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;博客开发历程&lt;/h2&gt;

&lt;p&gt;2013-1-27 用 Evolus Pencil 创建 博客主页原型&lt;/p&gt;

&lt;p&gt;2013-1-28 开始编写 主页 相应模板 和 CSS&lt;/p&gt;

&lt;p&gt;2013-2-06 粗略勾画 博文页面原型&lt;/p&gt;

&lt;p&gt;2013-2-07 大体完成 博文页面 模板&lt;/p&gt;

&lt;p&gt;2013-2-08 进行测试和完善 Markdown 显示， 针对IE 进行CSS完善&lt;/p&gt;

&lt;p&gt;2013-2-09 博客基本完工，发表第一篇博文&lt;/p&gt;

&lt;p&gt;2013-2-12 调节了首页博文标题从h2改h3， 博客通过 IE9, Opera 测试&lt;/p&gt;

&lt;p&gt;2013-2-24 花了三天对整个主题和模板重新写&lt;/p&gt;
</content>
 </entry>
 
 
</feed>